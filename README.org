* emacs scrum report generator

** overview

   [[http://www.gnu.org/software/emacs/][emacs]] is a text editor.  an extensible one.  it is mainly used for
   coding, but it can also do anything else.  [[http://orgmode.org][org-mode]] is an extension
   to emacs that provides a simple way to manage todo lists, organize
   notes, or maybe do some project management.

   scrum is an agile process for software development.  scrum.el is an
   extension to org-mode that generates tables and burndown charts
   that may be helpful to a scrum team.  all generated content is
   based on the existing content of the org buffer.

** example
   
   here is an example [[example.org][org]] file.

   here is an example [[example-report.txt][report]] generated from the above file.  sections
   2.1, 2.2, and 2.3 were generated by scrum.el.
   
** setup

   1. install emacs
   2. add org-mode to your emacs installation (if you don't already
      have it.  you probably do)
   3. install gnuplot
   4. get gnuplot.el, add it to your emacs installation
   5. get scrum.el, add it to your emacs installation
   6. copy the template [[scrum-template.org]] file to your system and
      open it in emacs
   7. run 'M-x scrum-update'

** usage

*** scrum org file conventions

    there are several things that scrum.el expects to find in the
    org file on which it is running.  if something is missing, it will
    let you know.

**** header boilerplate

     add this block at the top of the file.  defines some parameters
     that org-mode uses when it exports, and defines the TODO states
     here, and creating the OWNER, ESTIMATED, and ACTUAL properties
     for tasks.

#+BEGIN_SRC org-mode
#+TITLE: [your report title]
#+AUTHOR: [your name]
#+EMAIL: [your email address]
#+TODO: TODO STARTED | DONE DEFERRED
#+COLUMNS: %35ITEM %TASKID %OWNER %3PRIORITY %TODO %5ESTIMATED{+} %3ACTUAL{+}
#+END_SRC

**** meta data

     to generate the report artifacts, scrum.el needs to know where to
     find your task data, how many developers are on the team, and the
     sprint schedule.  we'll add all those things as properties of the
     root headline of the tasks tree.

     1. the root headline must have the following properties:
        - ID should be set to 'TASKS'
        - SPRINTLENGTH is the number of days in the spring
        - SPRINTSTART is the date on which the sprint begins
     2. the root headline must have a property for each developer
        specifying their name and the number of hours per day they
        expect to work on this project.  names should be prefixed with
        'wpd-'.  for example, ":wpd-ian: 3" mean ian is expecting to
        work on this project for 3 hours per day.
     3. tasks (headlines with TODO's) should have 'OWNER' 'ESTIMATED'
        and 'ACTUAL' properties.  
        - OWNER is a list of space delimited developer names.  the
          first name is considered the owner of the task.
        - ESTIMATED is their time estimate in hours
        - ACTUAL is the number of actual hours spent

**** report blocks

     the generated content is written to dynamic blocks embedded in
     the same org file on which it is operating.  org-mode needs those
     blocks to have BEGIN and END statements so that it knows where to
     write the generated content.  to that end, this needs to be
     somewhere in the file.
     
#+BEGIN_SRC org-mode

#+BEGIN: block-update-summary
#+END:

#+BEGIN: block-update-graph
#+END:

#+PLOT: title:"Burndown" ind:1 deps:(3 4) set:"term dumb" set:"xtics scale 0.5" set:"ytics scale 0.5" file:"burndown.plt"
#+BEGIN: block-update-burndown
#+END:

#+BEGIN: columnview :hlines 2 :maxlevel 5 :id "TASKS"
#+END:

#+END_SRC

*** updating generated content

    generated content can be updated by running 'M-x scrum-update'

    alternatively, individual blocks can be updated by doing a 'C-c
    C-c' with the point on a dynamic block "#+BEGIN" line.

** bugs

   - I'm not sure if gnuplot.el works on windows.
   - org mode treats the ascii graph as a table because of the pipe
     character borders.  prefixing lines with apostrophes helps for
     ascii export, but html export is a mess.
   - gnuplot shouldn't have to write the graph to a temp file.
